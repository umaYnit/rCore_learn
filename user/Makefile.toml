[config]
skip_core_tasks = true

[env]
MODE = { value = "release", condition = { env_not_set = ["MODE"] } }

TARGET = "riscv64gc-unknown-none-elf"

APP_DIR = "src/bin"
TARGET_DIR = "target/${TARGET}/${MODE}/"

[tasks.elf]
env = { RELEASE_FLAG = { value = "--release", condition = { env = { "MODE" = "release" } } } }
command = "cargo"
args = ["build", "--bin", "${@}", "@@trim(RELEASE_FLAG)", "--target", "${TARGET}"]

[tasks.binary]
command = "rust-objcopy"
args = ["--binary-architecture=riscv64",
    "--strip-all", "-O", "binary", "${FILE_ELF}", "${FILE_BIN}"]

[tasks.build]
script_runner = "@duckscript"
script = '''
handle = glob_array ${APP_DIR}/*.rs
for path in ${handle}
    app_name = basename ${path}
    app_name = substring ${app_name} -3
    file_elf = set "${TARGET_DIR}${app_name}"
    set_env FILE_ELF ${file_elf}
    set_env FILE_BIN "${file_elf}.bin"
    cm_run_task binary
end
'''
dependencies = ["_build"]

[tasks._build]
env = { "CARGO_MAKE_RUST_SCRIPT_PROVIDER" = "cargo-script" }
script_runner = "@rust"
script = '''
fn main() {
    use std::fs;

    let base_address = 0x80400000usize;
    let step = 0x20000usize;
    let linker = "src/linker.ld";

    let before_linker = fs::read_to_string(linker).unwrap();

    for (app_id, entry) in fs::read_dir("src/bin").unwrap().enumerate() {
        let path = entry.unwrap();
        let app_name = path.file_name();
        let app_name = app_name.to_string_lossy();
        let app_name = app_name.trim_end_matches(".rs");


        let new_address = base_address + step * app_id;
        let new_linker = &before_linker.replace(&format!("{:#x}", base_address), &format!("{:#x}", new_address));

        fs::write(linker, new_linker).unwrap();

        if std::process::Command::new("cargo").args(&["make", "elf"]).arg(app_name)
            .spawn().unwrap().wait().unwrap().success() != true { panic!() }

        println!("[build] application {} start with address {:#x}", app_name, new_address);
    }
    fs::write(linker, before_linker).unwrap();
}

'''

[tasks.clippy]
command = "cargo"
args = ["clippy", "@@split(COMPILER_ARGS, )"]


# this issue: https://github.com/rust-embedded/cargo-binutils/issues/89
[tasks.readelf]
command = "rust-readobj"
args = ["--elf-output-style=GNU", "--headers", "${KERNEL_ELF}"]
dependencies = ["elf"]

[tasks.objdump]
script_runner = "@shell"
script = "rust-objdump --disassemble --demangle --section=.text --section=.got ${KERNEL_ELF} | rustfilt"
dependencies = ["elf"]

[tasks.nm]
script_runner = "@shell"
script = "rust-nm --demangle --print-size ${KERNEL_ELF} | sort | rustfilt"
dependencies = ["elf"]

# For rust-analyzer
[tasks.check]
command = "cargo"
args = ["check", "--message-format=json"]
